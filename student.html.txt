<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>连词成句练习</title>
    <style>
        body {
            font-family: '楷体', sans-serif;
            background: linear-gradient(135deg, #f0f5f9 0%, #e0e8ed 100%);
            color: #333;
            padding: 30px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            margin: 0;
        }

        #input-section {
            background-color: rgba(255, 255, 255, 0.8);
            border-radius: 20px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
            padding: 30px;
            width: 80%;
            max-width: 600px;
            margin-bottom: 30px;
        }

        #input-section h2 {
            color: #555;
            margin-bottom: 20px;
            text-align: center;
            font-size: 24px;
        }

        #input-section textarea {
            width: 100%;
            height: 150px;
            border: 1px solid #ccc;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            font-size: 16px;
            resize: none;
            background-color: #f9f9f9;
        }

        #input-section button,
        #next-button,
        #prev-button,
        #return-button {
            background-color: #0099cc;
            color: white;
            border: none;
            border-radius: 10px;
            padding: 12px 25px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
            box-shadow: 0 5px 10px rgba(0, 153, 204, 0.2);
        }

        #input-section button:hover,
        #next-button:hover,
        #prev-button:hover,
        #return-button:hover {
            background-color: #0077a3;
            transform: translateY(-2px);
        }

        #next-button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
            box-shadow: none;
        }

        #game-section {
            background-color: rgba(255, 255, 255, 0.8);
            border-radius: 20px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
            padding: 30px;
            width: 80%;
            max-width: 600px;
        }

        #modules {
            display: flex;
            gap: 20px;
            margin-bottom: 40px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .module {
            width: 130px;
            height: 50px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #f4f4f4;
            cursor: pointer;
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
        }

        .word {
            padding: 15px 30px;
            border: 1px solid #0099cc;
            border-radius: 10px;
            cursor: grab;
            background-color: #e6f2f7;
            color: #0099cc;
            font-size: 20px;
            font-weight: bold;
            margin: 5px;
        }

        #button-container {
            display: flex;
            justify-content: space-between;
            margin-top: 30px;
        }

        #finish-message {
            display: none;
            font-size: 28px;
            font-weight: bold;
            color: #0099cc;
            margin-bottom: 20px;
        }

        #return-button {
            display: none;
        }

        #qrcode {
            margin-top: 20px;
        }
    </style>
    <!-- 引入二维码库 -->
    <script src="https://cdn.jsdelivr.net/npm/qrcodejs/qrcode.min.js"></script>
</head>

<body>
    <div id="input-section">
        <h2>输入句子</h2>
        <textarea id="sentences-input" placeholder="输入若干个句子，每个生词用逗号或空格隔开"></textarea>
        <button id="start-button">生成练习 & 二维码</button>
        <div id="qrcode"></div>
    </div>

    <div id="game-section" style="display: none;">
        <div id="modules"></div>
        <div id="words"></div>
        <div id="button-container">
            <button id="prev-button">上一个</button>
            <button id="next-button" disabled>下一个</button>
        </div>
    </div>

    <div id="finish-message">恭喜你，练习完成！</div>
    <button id="return-button">返回</button>

    <script>
        const inputSection = document.getElementById('input-section');
        const gameSection = document.getElementById('game-section');
        const sentencesInput = document.getElementById('sentences-input');
        const startButton = document.getElementById('start-button');
        const modulesDiv = document.getElementById('modules');
        const wordsDiv = document.getElementById('words');
        const nextButton = document.getElementById('next-button');
        const prevButton = document.getElementById('prev-button');
        const finishMessage = document.getElementById('finish-message');
        const returnButton = document.getElementById('return-button');

        let sentences = [];
        let currentSentenceIndex = 0;

        startButton.addEventListener('click', () => {
            const inputText = sentencesInput.value;
            sentences = inputText.split('\n').filter(sentence => sentence.trim() !== '');

            if (sentences.length === 0) {
                alert('请输入至少一个句子');
                return;
            }

            // 生成分享链接，把句子编码进URL参数
            const encoded = encodeURIComponent(JSON.stringify(sentences));
            const url = `${window.location.origin}${window.location.pathname}?data=${encoded}`;

            // 清空二维码并生成
            document.getElementById("qrcode").innerHTML = "";
            new QRCode(document.getElementById("qrcode"), {
                text: url,
                width: 200,
                height: 200
            });

            // 显示练习
            inputSection.style.display = 'none';
            gameSection.style.display = 'block';
            finishMessage.style.display = 'none';
            returnButton.style.display = 'none';
            currentSentenceIndex = 0;
            startGame();
        });

        // 页面加载时检查URL是否带有data参数（学生扫码进入时用）
        window.addEventListener("load", () => {
            const params = new URLSearchParams(window.location.search);
            if (params.has("data")) {
                try {
                    sentences = JSON.parse(decodeURIComponent(params.get("data")));
                    inputSection.style.display = 'none';
                    gameSection.style.display = 'block';
                    finishMessage.style.display = 'none';
                    returnButton.style.display = 'none';
                    currentSentenceIndex = 0;
                    startGame();
                } catch (e) {
                    console.error("解析练习数据失败", e);
                }
            }
        });

        function startGame() {
            if (currentSentenceIndex >= sentences.length) {
                gameSection.style.display = 'none';
                finishMessage.style.display = 'block';
                returnButton.style.display = 'block';
                return;
            }

            if (currentSentenceIndex < 0) {
                currentSentenceIndex = 0;
            }

            const currentSentence = sentences[currentSentenceIndex];
            const words = currentSentence.split(/[,\s]+/).filter(word => word.trim() !== '');
            const shuffledWords = shuffleArray([...words]);

            modulesDiv.innerHTML = '';
            wordsDiv.innerHTML = '';

            words.forEach(() => {
                const module = document.createElement('div');
                module.classList.add('module');
                module.addEventListener('dragover', (e) => {
                    e.preventDefault();
                });
                module.addEventListener('drop', (e) => {
                    e.preventDefault();
                    const data = e.dataTransfer.getData('text');
                    const draggedWord = document.getElementById(data);
                    if (draggedWord) {
                        module.textContent = draggedWord.textContent;
                        draggedWord.style.display = 'none';
                        checkAnswer();
                    }
                });
                modulesDiv.appendChild(module);
            });

            shuffledWords.forEach(word => {
                const wordElement = document.createElement('div');
                wordElement.classList.add('word');
                wordElement.textContent = word;
                wordElement.id = `word-${word}-${Math.random().toString(36).substr(2, 9)}`;
                wordElement.draggable = true;
                wordElement.addEventListener('dragstart', (e) => {
                    e.dataTransfer.setData('text', wordElement.id);
                });
                wordElement.addEventListener('click', () => {
                    const emptyModule = Array.from(modulesDiv.children).find(module => module.textContent === '');
                    if (emptyModule) {
                        emptyModule.textContent = word;
                        wordElement.style.display = 'none';
                        checkAnswer();
                    }
                });
                wordsDiv.appendChild(wordElement);
            });

            prevButton.disabled = currentSentenceIndex === 0;
            nextButton.disabled = true;
        }

        function checkAnswer() {
            const currentSentence = sentences[currentSentenceIndex];
            const correctWords = currentSentence.split(/[,\s]+/).filter(word => word.trim() !== '');
            const userWords = Array.from(modulesDiv.children).map(module => module.textContent);

            const allFilled = userWords.every(word => word !== '');
            if (!allFilled) {
                nextButton.disabled = true;
                return;
            }

            const isCorrect = userWords.length === correctWords.length &&
                userWords.every((word, index) => word === correctWords[index]);

            nextButton.disabled = !isCorrect;
        }

        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }

        function goToNextSentence() {
            if (currentSentenceIndex === sentences.length - 1) {
                gameSection.style.display = 'none';
                finishMessage.style.display = 'block';
                returnButton.style.display = 'block';
            } else {
                currentSentenceIndex++;
                startGame();
            }
        }

        nextButton.addEventListener('click', goToNextSentence);

        prevButton.addEventListener('click', () => {
            currentSentenceIndex--;
            startGame();
        });

        returnButton.addEventListener('click', () => {
            inputSection.style.display = 'block';
            gameSection.style.display = 'none';
            finishMessage.style.display = 'none';
            returnButton.style.display = 'none';
            currentSentenceIndex = 0;
        });
    </script>
</body>
</html>
